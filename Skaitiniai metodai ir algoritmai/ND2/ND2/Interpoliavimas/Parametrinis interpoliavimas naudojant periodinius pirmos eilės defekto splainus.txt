function Splainu_interpoliavimas
clc,close all
figure(1), hold on, grid on, axis equal
syms f x
f=(x/5)*sin(x)+(x/5)*cos(5*x)
xx=(x./5)*sin(x)
yy=(x./5)*cos(5*x)
nP=9;
df=diff(f)
f=figure(1), hold on, grid on, axis([min(X)-0.1,max(X)
+0.1,min(Y)-0.1,max(Y)+0.1]);
title('Interpoliavimas Ermito splainais','FontWeight','b');
xrange=[0,3*pi]
X=[xrange(1):(xrange(2)-xrange(1))/(nP-1):xrange(2)]
Y=eval(subs(f,sym(x),sym(X)));
plot(X,Y,'ko');
DDF=splaino_koeficientai(X,Y,1)
for iii=1:nP-1
nnn=100;
[S,sss]=splainas(X(iii:iii+1),Y(iii:iii+1),DDF(iii:iii+1),n
nn);
plot(sss,eval(subs(f,sym(x),sym(sss))),'b-');
plot(sss,S,'k-','LineWidth',2,'MarkerSize',8)
end %-----------------ciklas per intervalus pabaiga
legend({['duotoji funkcija',char(f)],sprintf('Splainai %d
intervaluose',nP-1)});
return
end
function DDF=splaino_koeficientai(X,Y,iopt)
n=length(X);
A=zeros(n);b=zeros(n,1);
d=X(2:n)-X(1:(n-1))
for i=1:n-2
A(i,i:i+2)=[d(i)/6, (d(i)+d(i+1))/3,d(i+1)/6];
b(i)=(Y(i+2)-Y(i+1))/d(i+1)-(Y(i+1)-Y(i))/d(i);
end
if iopt == 0, A(n-1,1)=1;A(n,n)=1;
else, A(n-1,[1,2,n-1,n])=[d(1)/3, d(1)/6, d(n-1)/6,d(n-
1)/3];
A(n,[1,n])=[1,-1];
b(n-1)=(Y(2)-Y(1))/d(1)-(Y(n)-Y(n-1))/d(n-1);
end
DDF=A\b;
return
end
function [S,sss]=splainas(X,Y,DDF,nnn)
d=X(2)-X(1);
sss=X(1):(X(2)-X(1))/(nnn-1):X(2);
S=DDF(1)/2*(sss-X(1)).^2+(DDF(2)-DDF(1))/(6*d)*(sss-
X(1)).^3+(sss-X(1))*((Y(2)-Y(1))/d-DDF(1)*d/3-DDF(2)*d/6)
+Y(1);
return
end